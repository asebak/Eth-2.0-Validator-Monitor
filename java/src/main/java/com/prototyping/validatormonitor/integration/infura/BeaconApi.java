/*
 * Beaconcha.in ETH2 API
 * High performance API for querying information from the Ethereum 2.0 beacon chain The API is currently free to use. A fair use policy applies. Calls are rate limited to 10 requests / 1 minute / IP. All API results are cached for 1 minute. If you required a higher usage plan please checkout https://beaconcha.in/pricing.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.prototyping.validatormonitor.integration.infura;

import com.google.gson.reflect.TypeToken;
import com.prototyping.validatormonitor.integration.beaconchain.*;
import com.prototyping.validatormonitor.integration.infura.models.Data;
import com.prototyping.validatormonitor.integration.infura.models.GenesisBlock;
import com.prototyping.validatormonitor.integration.infura.models.ValidatorStatus;
import com.squareup.okhttp.Call;

import java.lang.reflect.Type;
import java.nio.charset.StandardCharsets;
import java.util.*;

import static com.prototyping.validatormonitor.Constants.INFURA_PROJECTID;
import static com.prototyping.validatormonitor.Constants.INFURA_PROJECTKEY;

public class BeaconApi {
    private ApiClient apiClient;

    public BeaconApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BeaconApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }


    public String GetInfuraAuthHeader() {
        return Base64.getEncoder().encodeToString((INFURA_PROJECTID + ":" + INFURA_PROJECTKEY).getBytes(StandardCharsets.UTF_8));
    }

    public Data<GenesisBlock> genesisBlockApi() throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eth/v1/beacon/genesis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("Authorization", "Basic " + GetInfuraAuthHeader());

        String[] localVarAuthNames = new String[] {  };

        Call call = apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, null);
        Type localVarReturnType = new TypeToken<Data<GenesisBlock>>(){}.getType();
        return (Data<GenesisBlock>)apiClient.execute(call, localVarReturnType).getData();
    }

    public Data<ValidatorStatus> validatorStatusApi(String indexOrPubkey) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eth/v1/beacon/states/head/validators/{indexOrPubKey}"
                .replaceAll("\\{" + "indexOrPubKey" + "\\}", apiClient.escapeString(indexOrPubkey.toString()));;

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("Authorization", "Basic " + GetInfuraAuthHeader());


        String[] localVarAuthNames = new String[] {  };
        Call call = apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, null);
        Type localVarReturnType = new TypeToken<Data<ValidatorStatus>>(){}.getType();
        return (Data<ValidatorStatus>)apiClient.execute(call, localVarReturnType).getData();
    }

}
