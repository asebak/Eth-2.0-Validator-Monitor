/*
 * Beaconcha.in ETH2 API
 * High performance API for querying information from the Ethereum 2.0 beacon chain The API is currently free to use. A fair use policy applies. Calls are rate limited to 10 requests / 1 minute / IP. All API results are cached for 1 minute. If you required a higher usage plan please checkout https://beaconcha.in/pricing.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.prototyping.validatormonitor.integration.beaconchain.api;

import com.prototyping.validatormonitor.integration.beaconchain.ApiCallback;
import com.prototyping.validatormonitor.integration.beaconchain.ApiClient;
import com.prototyping.validatormonitor.integration.beaconchain.ApiException;
import com.prototyping.validatormonitor.integration.beaconchain.ApiResponse;
import com.prototyping.validatormonitor.integration.beaconchain.Configuration;
import com.prototyping.validatormonitor.integration.beaconchain.Pair;
import com.prototyping.validatormonitor.integration.beaconchain.ProgressRequestBody;
import com.prototyping.validatormonitor.integration.beaconchain.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ValidatorApi {
    private ApiClient apiClient;

    public ValidatorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ValidatorApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1ValidatorEth1AddressGet
     * @param eth1address Eth1 address from which the validator deposits were sent (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorEth1AddressGetCall(String eth1address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/validator/eth1/{address}"
            .replaceAll("\\{" + "eth1address" + "\\}", apiClient.escapeString(eth1address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1ValidatorEth1AddressGetValidateBeforeCall(String eth1address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eth1address' is set
        if (eth1address == null) {
            throw new ApiException("Missing the required parameter 'eth1address' when calling apiV1ValidatorEth1AddressGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiV1ValidatorEth1AddressGetCall(eth1address, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all validators that belong to an eth1 address
     * 
     * @param eth1address Eth1 address from which the validator deposits were sent (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String apiV1ValidatorEth1AddressGet(String eth1address) throws ApiException {
        ApiResponse<String> resp = apiV1ValidatorEth1AddressGetWithHttpInfo(eth1address);
        return resp.getData();
    }

    /**
     * Get all validators that belong to an eth1 address
     * 
     * @param eth1address Eth1 address from which the validator deposits were sent (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> apiV1ValidatorEth1AddressGetWithHttpInfo(String eth1address) throws ApiException {
        com.squareup.okhttp.Call call = apiV1ValidatorEth1AddressGetValidateBeforeCall(eth1address, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all validators that belong to an eth1 address (asynchronously)
     * 
     * @param eth1address Eth1 address from which the validator deposits were sent (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorEth1AddressGetAsync(String eth1address, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ValidatorEth1AddressGetValidateBeforeCall(eth1address, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1ValidatorIndexOrPubkeyAttestationsGet
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyAttestationsGetCall(String indexOrPubkey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/validator/{indexOrPubkey}/attestations"
            .replaceAll("\\{" + "indexOrPubkey" + "\\}", apiClient.escapeString(indexOrPubkey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyAttestationsGetValidateBeforeCall(String indexOrPubkey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexOrPubkey' is set
        if (indexOrPubkey == null) {
            throw new ApiException("Missing the required parameter 'indexOrPubkey' when calling apiV1ValidatorIndexOrPubkeyAttestationsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyAttestationsGetCall(indexOrPubkey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all attestations during the last 100 epochs for up to 100 validators
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String apiV1ValidatorIndexOrPubkeyAttestationsGet(String indexOrPubkey) throws ApiException {
        ApiResponse<String> resp = apiV1ValidatorIndexOrPubkeyAttestationsGetWithHttpInfo(indexOrPubkey);
        return resp.getData();
    }

    /**
     * Get all attestations during the last 100 epochs for up to 100 validators
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> apiV1ValidatorIndexOrPubkeyAttestationsGetWithHttpInfo(String indexOrPubkey) throws ApiException {
        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyAttestationsGetValidateBeforeCall(indexOrPubkey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all attestations during the last 100 epochs for up to 100 validators (asynchronously)
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyAttestationsGetAsync(String indexOrPubkey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyAttestationsGetValidateBeforeCall(indexOrPubkey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1ValidatorIndexOrPubkeyBalancehistoryGet
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyBalancehistoryGetCall(String indexOrPubkey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/validator/{indexOrPubkey}/balancehistory"
            .replaceAll("\\{" + "indexOrPubkey" + "\\}", apiClient.escapeString(indexOrPubkey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyBalancehistoryGetValidateBeforeCall(String indexOrPubkey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexOrPubkey' is set
        if (indexOrPubkey == null) {
            throw new ApiException("Missing the required parameter 'indexOrPubkey' when calling apiV1ValidatorIndexOrPubkeyBalancehistoryGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyBalancehistoryGetCall(indexOrPubkey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the balance history (last 100 epochs) of up to 100 validators
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String apiV1ValidatorIndexOrPubkeyBalancehistoryGet(String indexOrPubkey) throws ApiException {
        ApiResponse<String> resp = apiV1ValidatorIndexOrPubkeyBalancehistoryGetWithHttpInfo(indexOrPubkey);
        return resp.getData();
    }

    /**
     * Get the balance history (last 100 epochs) of up to 100 validators
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> apiV1ValidatorIndexOrPubkeyBalancehistoryGetWithHttpInfo(String indexOrPubkey) throws ApiException {
        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyBalancehistoryGetValidateBeforeCall(indexOrPubkey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the balance history (last 100 epochs) of up to 100 validators (asynchronously)
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyBalancehistoryGetAsync(String indexOrPubkey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyBalancehistoryGetValidateBeforeCall(indexOrPubkey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1ValidatorIndexOrPubkeyDepositsGet
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyDepositsGetCall(String indexOrPubkey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/validator/{indexOrPubkey}/deposits"
            .replaceAll("\\{" + "indexOrPubkey" + "\\}", apiClient.escapeString(indexOrPubkey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyDepositsGetValidateBeforeCall(String indexOrPubkey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexOrPubkey' is set
        if (indexOrPubkey == null) {
            throw new ApiException("Missing the required parameter 'indexOrPubkey' when calling apiV1ValidatorIndexOrPubkeyDepositsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyDepositsGetCall(indexOrPubkey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all eth1 deposits for up to 100 validators
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String apiV1ValidatorIndexOrPubkeyDepositsGet(String indexOrPubkey) throws ApiException {
        ApiResponse<String> resp = apiV1ValidatorIndexOrPubkeyDepositsGetWithHttpInfo(indexOrPubkey);
        return resp.getData();
    }

    /**
     * Get all eth1 deposits for up to 100 validators
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> apiV1ValidatorIndexOrPubkeyDepositsGetWithHttpInfo(String indexOrPubkey) throws ApiException {
        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyDepositsGetValidateBeforeCall(indexOrPubkey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all eth1 deposits for up to 100 validators (asynchronously)
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyDepositsGetAsync(String indexOrPubkey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyDepositsGetValidateBeforeCall(indexOrPubkey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1ValidatorIndexOrPubkeyGet
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyGetCall(String indexOrPubkey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/validator/{indexOrPubkey}"
            .replaceAll("\\{" + "indexOrPubkey" + "\\}", apiClient.escapeString(indexOrPubkey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyGetValidateBeforeCall(String indexOrPubkey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexOrPubkey' is set
        if (indexOrPubkey == null) {
            throw new ApiException("Missing the required parameter 'indexOrPubkey' when calling apiV1ValidatorIndexOrPubkeyGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyGetCall(indexOrPubkey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get up to 100 validators by their index
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String apiV1ValidatorIndexOrPubkeyGet(String indexOrPubkey) throws ApiException {
        ApiResponse<String> resp = apiV1ValidatorIndexOrPubkeyGetWithHttpInfo(indexOrPubkey);
        return resp.getData();
    }

    /**
     * Get up to 100 validators by their index
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> apiV1ValidatorIndexOrPubkeyGetWithHttpInfo(String indexOrPubkey) throws ApiException {
        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyGetValidateBeforeCall(indexOrPubkey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get up to 100 validators by their index (asynchronously)
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyGetAsync(String indexOrPubkey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyGetValidateBeforeCall(indexOrPubkey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1ValidatorIndexOrPubkeyPerformanceGet
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyPerformanceGetCall(String indexOrPubkey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/validator/{indexOrPubkey}/performance"
            .replaceAll("\\{" + "indexOrPubkey" + "\\}", apiClient.escapeString(indexOrPubkey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyPerformanceGetValidateBeforeCall(String indexOrPubkey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexOrPubkey' is set
        if (indexOrPubkey == null) {
            throw new ApiException("Missing the required parameter 'indexOrPubkey' when calling apiV1ValidatorIndexOrPubkeyPerformanceGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyPerformanceGetCall(indexOrPubkey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the current performance of up to 100 validators
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String apiV1ValidatorIndexOrPubkeyPerformanceGet(String indexOrPubkey) throws ApiException {
        ApiResponse<String> resp = apiV1ValidatorIndexOrPubkeyPerformanceGetWithHttpInfo(indexOrPubkey);
        return resp.getData();
    }

    /**
     * Get the current performance of up to 100 validators
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> apiV1ValidatorIndexOrPubkeyPerformanceGetWithHttpInfo(String indexOrPubkey) throws ApiException {
        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyPerformanceGetValidateBeforeCall(indexOrPubkey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the current performance of up to 100 validators (asynchronously)
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyPerformanceGetAsync(String indexOrPubkey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyPerformanceGetValidateBeforeCall(indexOrPubkey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1ValidatorIndexOrPubkeyProposalsGet
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyProposalsGetCall(String indexOrPubkey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/validator/{indexOrPubkey}/proposals"
            .replaceAll("\\{" + "indexOrPubkey" + "\\}", apiClient.escapeString(indexOrPubkey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyProposalsGetValidateBeforeCall(String indexOrPubkey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'indexOrPubkey' is set
        if (indexOrPubkey == null) {
            throw new ApiException("Missing the required parameter 'indexOrPubkey' when calling apiV1ValidatorIndexOrPubkeyProposalsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyProposalsGetCall(indexOrPubkey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all proposed blocks during the last 100 epochs for up to 100 validators
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String apiV1ValidatorIndexOrPubkeyProposalsGet(String indexOrPubkey) throws ApiException {
        ApiResponse<String> resp = apiV1ValidatorIndexOrPubkeyProposalsGetWithHttpInfo(indexOrPubkey);
        return resp.getData();
    }

    /**
     * Get all proposed blocks during the last 100 epochs for up to 100 validators
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> apiV1ValidatorIndexOrPubkeyProposalsGetWithHttpInfo(String indexOrPubkey) throws ApiException {
        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyProposalsGetValidateBeforeCall(indexOrPubkey, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all proposed blocks during the last 100 epochs for up to 100 validators (asynchronously)
     * 
     * @param indexOrPubkey Up to 100 validator indicesOrPubkeys, comma separated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorIndexOrPubkeyProposalsGetAsync(String indexOrPubkey, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ValidatorIndexOrPubkeyProposalsGetValidateBeforeCall(indexOrPubkey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1ValidatorLeaderboardGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorLeaderboardGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/validator/leaderboard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1ValidatorLeaderboardGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = apiV1ValidatorLeaderboardGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the current top 100 performing validators (using the income over the last 7 days)
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String apiV1ValidatorLeaderboardGet() throws ApiException {
        ApiResponse<String> resp = apiV1ValidatorLeaderboardGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get the current top 100 performing validators (using the income over the last 7 days)
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> apiV1ValidatorLeaderboardGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = apiV1ValidatorLeaderboardGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the current top 100 performing validators (using the income over the last 7 days) (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ValidatorLeaderboardGetAsync(final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ValidatorLeaderboardGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
