/*
 * Beaconcha.in ETH2 API
 * High performance API for querying information from the Ethereum 2.0 beacon chain The API is currently free to use. A fair use policy applies. Calls are rate limited to 10 requests / 1 minute / IP. All API results are cached for 1 minute. If you required a higher usage plan please checkout https://beaconcha.in/pricing.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.prototyping.validatormonitor.integration.beaconchain.api;

import com.prototyping.validatormonitor.integration.beaconchain.ApiCallback;
import com.prototyping.validatormonitor.integration.beaconchain.ApiClient;
import com.prototyping.validatormonitor.integration.beaconchain.ApiException;
import com.prototyping.validatormonitor.integration.beaconchain.ApiResponse;
import com.prototyping.validatormonitor.integration.beaconchain.Configuration;
import com.prototyping.validatormonitor.integration.beaconchain.Pair;
import com.prototyping.validatormonitor.integration.beaconchain.ProgressRequestBody;
import com.prototyping.validatormonitor.integration.beaconchain.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.prototyping.validatormonitor.integration.beaconchain.model.InlineResponse200;
import com.prototyping.validatormonitor.integration.beaconchain.model.InlineResponse2001;
import com.prototyping.validatormonitor.integration.beaconchain.model.TypesApiResponse;
import com.prototyping.validatormonitor.integration.beaconchain.model.UtilsOAuthResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient apiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1UserDashboardSavePost
     * @param token Your device&#x60;s firebase notification token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1UserDashboardSavePostCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = token;

        // create path and map variables
        String localVarPath = "/api/v1/user/dashboard/save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1UserDashboardSavePostValidateBeforeCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling apiV1UserDashboardSavePost(Async)");
        }
        

        com.squareup.okhttp.Call call = apiV1UserDashboardSavePostCall(token, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Register or update your mobile notification token
     * 
     * @param token Your device&#x60;s firebase notification token (required)
     * @return TypesApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TypesApiResponse apiV1UserDashboardSavePost(String token) throws ApiException {
        ApiResponse<TypesApiResponse> resp = apiV1UserDashboardSavePostWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Register or update your mobile notification token
     * 
     * @param token Your device&#x60;s firebase notification token (required)
     * @return ApiResponse&lt;TypesApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TypesApiResponse> apiV1UserDashboardSavePostWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = apiV1UserDashboardSavePostValidateBeforeCall(token, null, null);
        Type localVarReturnType = new TypeToken<TypesApiResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register or update your mobile notification token (asynchronously)
     * 
     * @param token Your device&#x60;s firebase notification token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1UserDashboardSavePostAsync(String token, final ApiCallback<TypesApiResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1UserDashboardSavePostValidateBeforeCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TypesApiResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1UserMobileSettingsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1UserMobileSettingsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/user/mobile/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1UserMobileSettingsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = apiV1UserMobileSettingsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get your device settings, currently only whether to enable mobile notifcations or not
     * 
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 apiV1UserMobileSettingsGet() throws ApiException {
        ApiResponse<InlineResponse200> resp = apiV1UserMobileSettingsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get your device settings, currently only whether to enable mobile notifcations or not
     * 
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> apiV1UserMobileSettingsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = apiV1UserMobileSettingsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get your device settings, currently only whether to enable mobile notifcations or not (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1UserMobileSettingsGetAsync(final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1UserMobileSettingsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1UserMobileSettingsPost
     * @param notifyEnabled Whether to enable mobile notifications for this device or not (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1UserMobileSettingsPostCall(Boolean notifyEnabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = notifyEnabled;

        // create path and map variables
        String localVarPath = "/api/v1/user/mobile/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1UserMobileSettingsPostValidateBeforeCall(Boolean notifyEnabled, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'notifyEnabled' is set
        if (notifyEnabled == null) {
            throw new ApiException("Missing the required parameter 'notifyEnabled' when calling apiV1UserMobileSettingsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = apiV1UserMobileSettingsPostCall(notifyEnabled, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Changing your devices mobile settings
     * 
     * @param notifyEnabled Whether to enable mobile notifications for this device or not (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 apiV1UserMobileSettingsPost(Boolean notifyEnabled) throws ApiException {
        ApiResponse<InlineResponse200> resp = apiV1UserMobileSettingsPostWithHttpInfo(notifyEnabled);
        return resp.getData();
    }

    /**
     * Changing your devices mobile settings
     * 
     * @param notifyEnabled Whether to enable mobile notifications for this device or not (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> apiV1UserMobileSettingsPostWithHttpInfo(Boolean notifyEnabled) throws ApiException {
        com.squareup.okhttp.Call call = apiV1UserMobileSettingsPostValidateBeforeCall(notifyEnabled, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Changing your devices mobile settings (asynchronously)
     * 
     * @param notifyEnabled Whether to enable mobile notifications for this device or not (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1UserMobileSettingsPostAsync(Boolean notifyEnabled, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1UserMobileSettingsPostValidateBeforeCall(notifyEnabled, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1UserTokenPost
     * @param grantType grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token (required)
     * @param code Only required when using authorization_code grant type. Code received via oauth redirect_uri (optional)
     * @param redirectUri Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow. (optional)
     * @param refreshToken Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1UserTokenPostCall(String grantType, String code, String redirectUri, String refreshToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/user/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (grantType != null)
        localVarFormParams.put("grant_type", grantType);
        if (code != null)
        localVarFormParams.put("code", code);
        if (redirectUri != null)
        localVarFormParams.put("redirect_uri", redirectUri);
        if (refreshToken != null)
        localVarFormParams.put("refresh_token", refreshToken);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuthAccessCode" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1UserTokenPostValidateBeforeCall(String grantType, String code, String redirectUri, String refreshToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling apiV1UserTokenPost(Async)");
        }
        

        com.squareup.okhttp.Call call = apiV1UserTokenPostCall(grantType, code, redirectUri, refreshToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Exchange your oauth code for an access token or refresh your access token
     * 
     * @param grantType grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token (required)
     * @param code Only required when using authorization_code grant type. Code received via oauth redirect_uri (optional)
     * @param redirectUri Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow. (optional)
     * @param refreshToken Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow. (optional)
     * @return UtilsOAuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UtilsOAuthResponse apiV1UserTokenPost(String grantType, String code, String redirectUri, String refreshToken) throws ApiException {
        ApiResponse<UtilsOAuthResponse> resp = apiV1UserTokenPostWithHttpInfo(grantType, code, redirectUri, refreshToken);
        return resp.getData();
    }

    /**
     * Exchange your oauth code for an access token or refresh your access token
     * 
     * @param grantType grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token (required)
     * @param code Only required when using authorization_code grant type. Code received via oauth redirect_uri (optional)
     * @param redirectUri Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow. (optional)
     * @param refreshToken Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow. (optional)
     * @return ApiResponse&lt;UtilsOAuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UtilsOAuthResponse> apiV1UserTokenPostWithHttpInfo(String grantType, String code, String redirectUri, String refreshToken) throws ApiException {
        com.squareup.okhttp.Call call = apiV1UserTokenPostValidateBeforeCall(grantType, code, redirectUri, refreshToken, null, null);
        Type localVarReturnType = new TypeToken<UtilsOAuthResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Exchange your oauth code for an access token or refresh your access token (asynchronously)
     * 
     * @param grantType grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token (required)
     * @param code Only required when using authorization_code grant type. Code received via oauth redirect_uri (optional)
     * @param redirectUri Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow. (optional)
     * @param refreshToken Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1UserTokenPostAsync(String grantType, String code, String redirectUri, String refreshToken, final ApiCallback<UtilsOAuthResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1UserTokenPostValidateBeforeCall(grantType, code, redirectUri, refreshToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UtilsOAuthResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1UserValidatorPubkeyAddPost
     * @param pubKey Public Key of validator you want to subscribe to (required)
     * @param balanceDecreases Submit \\ (optional)
     * @param validatorSlashed Submit \\ (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1UserValidatorPubkeyAddPostCall(String pubKey, String balanceDecreases, String validatorSlashed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = validatorSlashed;

        // create path and map variables
        String localVarPath = "/api/v1/user/validator/{pubkey}/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pubKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pubKey", pubKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1UserValidatorPubkeyAddPostValidateBeforeCall(String pubKey, String balanceDecreases, String validatorSlashed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pubKey' is set
        if (pubKey == null) {
            throw new ApiException("Missing the required parameter 'pubKey' when calling apiV1UserValidatorPubkeyAddPost(Async)");
        }
        

        com.squareup.okhttp.Call call = apiV1UserValidatorPubkeyAddPostCall(pubKey, balanceDecreases, validatorSlashed, progressListener, progressRequestListener);
        return call;

    }

    /**
     * subscribes a user to get notifications from a specific validator
     * 
     * @param pubKey Public Key of validator you want to subscribe to (required)
     * @param balanceDecreases Submit \\ (optional)
     * @param validatorSlashed Submit \\ (optional)
     * @return TypesApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TypesApiResponse apiV1UserValidatorPubkeyAddPost(String pubKey, String balanceDecreases, String validatorSlashed) throws ApiException {
        ApiResponse<TypesApiResponse> resp = apiV1UserValidatorPubkeyAddPostWithHttpInfo(pubKey, balanceDecreases, validatorSlashed);
        return resp.getData();
    }

    /**
     * subscribes a user to get notifications from a specific validator
     * 
     * @param pubKey Public Key of validator you want to subscribe to (required)
     * @param balanceDecreases Submit \\ (optional)
     * @param validatorSlashed Submit \\ (optional)
     * @return ApiResponse&lt;TypesApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TypesApiResponse> apiV1UserValidatorPubkeyAddPostWithHttpInfo(String pubKey, String balanceDecreases, String validatorSlashed) throws ApiException {
        com.squareup.okhttp.Call call = apiV1UserValidatorPubkeyAddPostValidateBeforeCall(pubKey, balanceDecreases, validatorSlashed, null, null);
        Type localVarReturnType = new TypeToken<TypesApiResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * subscribes a user to get notifications from a specific validator (asynchronously)
     * 
     * @param pubKey Public Key of validator you want to subscribe to (required)
     * @param balanceDecreases Submit \\ (optional)
     * @param validatorSlashed Submit \\ (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1UserValidatorPubkeyAddPostAsync(String pubKey, String balanceDecreases, String validatorSlashed, final ApiCallback<TypesApiResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1UserValidatorPubkeyAddPostValidateBeforeCall(pubKey, balanceDecreases, validatorSlashed, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TypesApiResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1UserValidatorPubkeyRemovePost
     * @param pubKey Public Key of validator you want to subscribe to (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1UserValidatorPubkeyRemovePostCall(String pubKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/user/validator/{pubkey}/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pubKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pubKey", pubKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1UserValidatorPubkeyRemovePostValidateBeforeCall(String pubKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pubKey' is set
        if (pubKey == null) {
            throw new ApiException("Missing the required parameter 'pubKey' when calling apiV1UserValidatorPubkeyRemovePost(Async)");
        }
        

        com.squareup.okhttp.Call call = apiV1UserValidatorPubkeyRemovePostCall(pubKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * unsubscribes a user from a specific validator
     * 
     * @param pubKey Public Key of validator you want to subscribe to (required)
     * @return TypesApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TypesApiResponse apiV1UserValidatorPubkeyRemovePost(String pubKey) throws ApiException {
        ApiResponse<TypesApiResponse> resp = apiV1UserValidatorPubkeyRemovePostWithHttpInfo(pubKey);
        return resp.getData();
    }

    /**
     * unsubscribes a user from a specific validator
     * 
     * @param pubKey Public Key of validator you want to subscribe to (required)
     * @return ApiResponse&lt;TypesApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TypesApiResponse> apiV1UserValidatorPubkeyRemovePostWithHttpInfo(String pubKey) throws ApiException {
        com.squareup.okhttp.Call call = apiV1UserValidatorPubkeyRemovePostValidateBeforeCall(pubKey, null, null);
        Type localVarReturnType = new TypeToken<TypesApiResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * unsubscribes a user from a specific validator (asynchronously)
     * 
     * @param pubKey Public Key of validator you want to subscribe to (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1UserValidatorPubkeyRemovePostAsync(String pubKey, final ApiCallback<TypesApiResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1UserValidatorPubkeyRemovePostValidateBeforeCall(pubKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TypesApiResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1UserValidatorSavedGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1UserValidatorSavedGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/user/validator/saved";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1UserValidatorSavedGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = apiV1UserValidatorSavedGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all your tagged validators
     * 
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 apiV1UserValidatorSavedGet() throws ApiException {
        ApiResponse<InlineResponse2001> resp = apiV1UserValidatorSavedGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all your tagged validators
     * 
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> apiV1UserValidatorSavedGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = apiV1UserValidatorSavedGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all your tagged validators (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1UserValidatorSavedGetAsync(final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1UserValidatorSavedGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
