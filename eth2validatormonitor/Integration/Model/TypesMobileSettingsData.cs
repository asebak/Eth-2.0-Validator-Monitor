/* 
 * Beaconcha.in ETH2 API
 *
 * High performance API for querying information from the Ethereum 2.0 beacon chain The API is currently free to use. A fair use policy applies. Calls are rate limited to 10 requests / 1 minute / IP. All API results are cached for 1 minute. If you required a higher usage plan please checkout https://beaconcha.in/pricing.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TypesMobileSettingsData
    /// </summary>
    [DataContract]
    public partial class TypesMobileSettingsData :  IEquatable<TypesMobileSettingsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TypesMobileSettingsData" /> class.
        /// </summary>
        /// <param name="notifyToken">notifyToken.</param>
        public TypesMobileSettingsData(string notifyToken = default(string))
        {
            this.NotifyToken = notifyToken;
        }
        
        /// <summary>
        /// Gets or Sets NotifyToken
        /// </summary>
        [DataMember(Name="notify_token", EmitDefaultValue=false)]
        public string NotifyToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TypesMobileSettingsData {\n");
            sb.Append("  NotifyToken: ").Append(NotifyToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TypesMobileSettingsData);
        }

        /// <summary>
        /// Returns true if TypesMobileSettingsData instances are equal
        /// </summary>
        /// <param name="input">Instance of TypesMobileSettingsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TypesMobileSettingsData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NotifyToken == input.NotifyToken ||
                    (this.NotifyToken != null &&
                    this.NotifyToken.Equals(input.NotifyToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NotifyToken != null)
                    hashCode = hashCode * 59 + this.NotifyToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
