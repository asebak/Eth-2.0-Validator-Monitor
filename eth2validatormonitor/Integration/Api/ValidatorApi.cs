/* 
 * Beaconcha.in ETH2 API
 *
 * High performance API for querying information from the Ethereum 2.0 beacon chain The API is currently free to use. A fair use policy applies. Calls are rate limited to 10 requests / 1 minute / IP. All API results are cached for 1 minute. If you required a higher usage plan please checkout https://beaconcha.in/pricing.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IValidatorApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all validators that belong to an eth1 address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth1address">Eth1 address from which the validator deposits were sent</param>
        /// <returns>string</returns>
        string ApiV1ValidatorEth1AddressGet (string eth1address);

        /// <summary>
        /// Get all validators that belong to an eth1 address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth1address">Eth1 address from which the validator deposits were sent</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV1ValidatorEth1AddressGetWithHttpInfo (string eth1address);
        /// <summary>
        /// Get all attestations during the last 100 epochs for up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>string</returns>
        string ApiV1ValidatorIndexOrPubkeyAttestationsGet (string indexOrPubkey);

        /// <summary>
        /// Get all attestations during the last 100 epochs for up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV1ValidatorIndexOrPubkeyAttestationsGetWithHttpInfo (string indexOrPubkey);
        /// <summary>
        /// Get the balance history (last 100 epochs) of up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>string</returns>
        string ApiV1ValidatorIndexOrPubkeyBalancehistoryGet (string indexOrPubkey);

        /// <summary>
        /// Get the balance history (last 100 epochs) of up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV1ValidatorIndexOrPubkeyBalancehistoryGetWithHttpInfo (string indexOrPubkey);
        /// <summary>
        /// Get all eth1 deposits for up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>string</returns>
        string ApiV1ValidatorIndexOrPubkeyDepositsGet (string indexOrPubkey);

        /// <summary>
        /// Get all eth1 deposits for up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV1ValidatorIndexOrPubkeyDepositsGetWithHttpInfo (string indexOrPubkey);
        /// <summary>
        /// Get up to 100 validators by their index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>string</returns>
        string ApiV1ValidatorIndexOrPubkeyGet (string indexOrPubkey);

        /// <summary>
        /// Get up to 100 validators by their index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV1ValidatorIndexOrPubkeyGetWithHttpInfo (string indexOrPubkey);
        /// <summary>
        /// Get the current performance of up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>string</returns>
        string ApiV1ValidatorIndexOrPubkeyPerformanceGet (string indexOrPubkey);

        /// <summary>
        /// Get the current performance of up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV1ValidatorIndexOrPubkeyPerformanceGetWithHttpInfo (string indexOrPubkey);
        /// <summary>
        /// Get all proposed blocks during the last 100 epochs for up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>string</returns>
        string ApiV1ValidatorIndexOrPubkeyProposalsGet (string indexOrPubkey);

        /// <summary>
        /// Get all proposed blocks during the last 100 epochs for up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV1ValidatorIndexOrPubkeyProposalsGetWithHttpInfo (string indexOrPubkey);
        /// <summary>
        /// Get the current top 100 performing validators (using the income over the last 7 days)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string ApiV1ValidatorLeaderboardGet ();

        /// <summary>
        /// Get the current top 100 performing validators (using the income over the last 7 days)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV1ValidatorLeaderboardGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all validators that belong to an eth1 address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth1address">Eth1 address from which the validator deposits were sent</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV1ValidatorEth1AddressGetAsync (string eth1address);

        /// <summary>
        /// Get all validators that belong to an eth1 address
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth1address">Eth1 address from which the validator deposits were sent</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorEth1AddressGetAsyncWithHttpInfo (string eth1address);
        /// <summary>
        /// Get all attestations during the last 100 epochs for up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV1ValidatorIndexOrPubkeyAttestationsGetAsync (string indexOrPubkey);

        /// <summary>
        /// Get all attestations during the last 100 epochs for up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorIndexOrPubkeyAttestationsGetAsyncWithHttpInfo (string indexOrPubkey);
        /// <summary>
        /// Get the balance history (last 100 epochs) of up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV1ValidatorIndexOrPubkeyBalancehistoryGetAsync (string indexOrPubkey);

        /// <summary>
        /// Get the balance history (last 100 epochs) of up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorIndexOrPubkeyBalancehistoryGetAsyncWithHttpInfo (string indexOrPubkey);
        /// <summary>
        /// Get all eth1 deposits for up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV1ValidatorIndexOrPubkeyDepositsGetAsync (string indexOrPubkey);

        /// <summary>
        /// Get all eth1 deposits for up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorIndexOrPubkeyDepositsGetAsyncWithHttpInfo (string indexOrPubkey);
        /// <summary>
        /// Get up to 100 validators by their index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV1ValidatorIndexOrPubkeyGetAsync (string indexOrPubkey);

        /// <summary>
        /// Get up to 100 validators by their index
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorIndexOrPubkeyGetAsyncWithHttpInfo (string indexOrPubkey);
        /// <summary>
        /// Get the current performance of up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV1ValidatorIndexOrPubkeyPerformanceGetAsync (string indexOrPubkey);

        /// <summary>
        /// Get the current performance of up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorIndexOrPubkeyPerformanceGetAsyncWithHttpInfo (string indexOrPubkey);
        /// <summary>
        /// Get all proposed blocks during the last 100 epochs for up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV1ValidatorIndexOrPubkeyProposalsGetAsync (string indexOrPubkey);

        /// <summary>
        /// Get all proposed blocks during the last 100 epochs for up to 100 validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorIndexOrPubkeyProposalsGetAsyncWithHttpInfo (string indexOrPubkey);
        /// <summary>
        /// Get the current top 100 performing validators (using the income over the last 7 days)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV1ValidatorLeaderboardGetAsync ();

        /// <summary>
        /// Get the current top 100 performing validators (using the income over the last 7 days)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorLeaderboardGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ValidatorApi : IValidatorApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ValidatorApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ValidatorApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all validators that belong to an eth1 address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth1address">Eth1 address from which the validator deposits were sent</param>
        /// <returns>string</returns>
        public string ApiV1ValidatorEth1AddressGet (string eth1address)
        {
             ApiResponse<string> localVarResponse = ApiV1ValidatorEth1AddressGetWithHttpInfo(eth1address);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all validators that belong to an eth1 address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth1address">Eth1 address from which the validator deposits were sent</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV1ValidatorEth1AddressGetWithHttpInfo (string eth1address)
        {
            // verify the required parameter 'eth1address' is set
            if (eth1address == null)
                throw new ApiException(400, "Missing required parameter 'eth1address' when calling ValidatorApi->ApiV1ValidatorEth1AddressGet");

            var localVarPath = "/api/v1/validator/eth1/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eth1address != null) localVarPathParams.Add("eth1address", this.Configuration.ApiClient.ParameterToString(eth1address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorEth1AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all validators that belong to an eth1 address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth1address">Eth1 address from which the validator deposits were sent</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV1ValidatorEth1AddressGetAsync (string eth1address)
        {
             ApiResponse<string> localVarResponse = await ApiV1ValidatorEth1AddressGetAsyncWithHttpInfo(eth1address);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all validators that belong to an eth1 address 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eth1address">Eth1 address from which the validator deposits were sent</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorEth1AddressGetAsyncWithHttpInfo (string eth1address)
        {
            // verify the required parameter 'eth1address' is set
            if (eth1address == null)
                throw new ApiException(400, "Missing required parameter 'eth1address' when calling ValidatorApi->ApiV1ValidatorEth1AddressGet");

            var localVarPath = "/api/v1/validator/eth1/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eth1address != null) localVarPathParams.Add("eth1address", this.Configuration.ApiClient.ParameterToString(eth1address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorEth1AddressGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all attestations during the last 100 epochs for up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>string</returns>
        public string ApiV1ValidatorIndexOrPubkeyAttestationsGet (string indexOrPubkey)
        {
             ApiResponse<string> localVarResponse = ApiV1ValidatorIndexOrPubkeyAttestationsGetWithHttpInfo(indexOrPubkey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all attestations during the last 100 epochs for up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV1ValidatorIndexOrPubkeyAttestationsGetWithHttpInfo (string indexOrPubkey)
        {
            // verify the required parameter 'indexOrPubkey' is set
            if (indexOrPubkey == null)
                throw new ApiException(400, "Missing required parameter 'indexOrPubkey' when calling ValidatorApi->ApiV1ValidatorIndexOrPubkeyAttestationsGet");

            var localVarPath = "/api/v1/validator/{indexOrPubkey}/attestations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (indexOrPubkey != null) localVarPathParams.Add("indexOrPubkey", this.Configuration.ApiClient.ParameterToString(indexOrPubkey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorIndexOrPubkeyAttestationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all attestations during the last 100 epochs for up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV1ValidatorIndexOrPubkeyAttestationsGetAsync (string indexOrPubkey)
        {
             ApiResponse<string> localVarResponse = await ApiV1ValidatorIndexOrPubkeyAttestationsGetAsyncWithHttpInfo(indexOrPubkey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all attestations during the last 100 epochs for up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorIndexOrPubkeyAttestationsGetAsyncWithHttpInfo (string indexOrPubkey)
        {
            // verify the required parameter 'indexOrPubkey' is set
            if (indexOrPubkey == null)
                throw new ApiException(400, "Missing required parameter 'indexOrPubkey' when calling ValidatorApi->ApiV1ValidatorIndexOrPubkeyAttestationsGet");

            var localVarPath = "/api/v1/validator/{indexOrPubkey}/attestations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (indexOrPubkey != null) localVarPathParams.Add("indexOrPubkey", this.Configuration.ApiClient.ParameterToString(indexOrPubkey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorIndexOrPubkeyAttestationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the balance history (last 100 epochs) of up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>string</returns>
        public string ApiV1ValidatorIndexOrPubkeyBalancehistoryGet (string indexOrPubkey)
        {
             ApiResponse<string> localVarResponse = ApiV1ValidatorIndexOrPubkeyBalancehistoryGetWithHttpInfo(indexOrPubkey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the balance history (last 100 epochs) of up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV1ValidatorIndexOrPubkeyBalancehistoryGetWithHttpInfo (string indexOrPubkey)
        {
            // verify the required parameter 'indexOrPubkey' is set
            if (indexOrPubkey == null)
                throw new ApiException(400, "Missing required parameter 'indexOrPubkey' when calling ValidatorApi->ApiV1ValidatorIndexOrPubkeyBalancehistoryGet");

            var localVarPath = "/api/v1/validator/{indexOrPubkey}/balancehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (indexOrPubkey != null) localVarPathParams.Add("indexOrPubkey", this.Configuration.ApiClient.ParameterToString(indexOrPubkey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorIndexOrPubkeyBalancehistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the balance history (last 100 epochs) of up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV1ValidatorIndexOrPubkeyBalancehistoryGetAsync (string indexOrPubkey)
        {
             ApiResponse<string> localVarResponse = await ApiV1ValidatorIndexOrPubkeyBalancehistoryGetAsyncWithHttpInfo(indexOrPubkey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the balance history (last 100 epochs) of up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorIndexOrPubkeyBalancehistoryGetAsyncWithHttpInfo (string indexOrPubkey)
        {
            // verify the required parameter 'indexOrPubkey' is set
            if (indexOrPubkey == null)
                throw new ApiException(400, "Missing required parameter 'indexOrPubkey' when calling ValidatorApi->ApiV1ValidatorIndexOrPubkeyBalancehistoryGet");

            var localVarPath = "/api/v1/validator/{indexOrPubkey}/balancehistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (indexOrPubkey != null) localVarPathParams.Add("indexOrPubkey", this.Configuration.ApiClient.ParameterToString(indexOrPubkey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorIndexOrPubkeyBalancehistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all eth1 deposits for up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>string</returns>
        public string ApiV1ValidatorIndexOrPubkeyDepositsGet (string indexOrPubkey)
        {
             ApiResponse<string> localVarResponse = ApiV1ValidatorIndexOrPubkeyDepositsGetWithHttpInfo(indexOrPubkey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all eth1 deposits for up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV1ValidatorIndexOrPubkeyDepositsGetWithHttpInfo (string indexOrPubkey)
        {
            // verify the required parameter 'indexOrPubkey' is set
            if (indexOrPubkey == null)
                throw new ApiException(400, "Missing required parameter 'indexOrPubkey' when calling ValidatorApi->ApiV1ValidatorIndexOrPubkeyDepositsGet");

            var localVarPath = "/api/v1/validator/{indexOrPubkey}/deposits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (indexOrPubkey != null) localVarPathParams.Add("indexOrPubkey", this.Configuration.ApiClient.ParameterToString(indexOrPubkey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorIndexOrPubkeyDepositsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all eth1 deposits for up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV1ValidatorIndexOrPubkeyDepositsGetAsync (string indexOrPubkey)
        {
             ApiResponse<string> localVarResponse = await ApiV1ValidatorIndexOrPubkeyDepositsGetAsyncWithHttpInfo(indexOrPubkey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all eth1 deposits for up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorIndexOrPubkeyDepositsGetAsyncWithHttpInfo (string indexOrPubkey)
        {
            // verify the required parameter 'indexOrPubkey' is set
            if (indexOrPubkey == null)
                throw new ApiException(400, "Missing required parameter 'indexOrPubkey' when calling ValidatorApi->ApiV1ValidatorIndexOrPubkeyDepositsGet");

            var localVarPath = "/api/v1/validator/{indexOrPubkey}/deposits";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (indexOrPubkey != null) localVarPathParams.Add("indexOrPubkey", this.Configuration.ApiClient.ParameterToString(indexOrPubkey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorIndexOrPubkeyDepositsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get up to 100 validators by their index 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>string</returns>
        public string ApiV1ValidatorIndexOrPubkeyGet (string indexOrPubkey)
        {
             ApiResponse<string> localVarResponse = ApiV1ValidatorIndexOrPubkeyGetWithHttpInfo(indexOrPubkey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get up to 100 validators by their index 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV1ValidatorIndexOrPubkeyGetWithHttpInfo (string indexOrPubkey)
        {
            // verify the required parameter 'indexOrPubkey' is set
            if (indexOrPubkey == null)
                throw new ApiException(400, "Missing required parameter 'indexOrPubkey' when calling ValidatorApi->ApiV1ValidatorIndexOrPubkeyGet");

            var localVarPath = "/api/v1/validator/{indexOrPubkey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (indexOrPubkey != null) localVarPathParams.Add("indexOrPubkey", this.Configuration.ApiClient.ParameterToString(indexOrPubkey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorIndexOrPubkeyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get up to 100 validators by their index 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV1ValidatorIndexOrPubkeyGetAsync (string indexOrPubkey)
        {
             ApiResponse<string> localVarResponse = await ApiV1ValidatorIndexOrPubkeyGetAsyncWithHttpInfo(indexOrPubkey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get up to 100 validators by their index 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorIndexOrPubkeyGetAsyncWithHttpInfo (string indexOrPubkey)
        {
            // verify the required parameter 'indexOrPubkey' is set
            if (indexOrPubkey == null)
                throw new ApiException(400, "Missing required parameter 'indexOrPubkey' when calling ValidatorApi->ApiV1ValidatorIndexOrPubkeyGet");

            var localVarPath = "/api/v1/validator/{indexOrPubkey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (indexOrPubkey != null) localVarPathParams.Add("indexOrPubkey", this.Configuration.ApiClient.ParameterToString(indexOrPubkey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorIndexOrPubkeyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the current performance of up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>string</returns>
        public string ApiV1ValidatorIndexOrPubkeyPerformanceGet (string indexOrPubkey)
        {
             ApiResponse<string> localVarResponse = ApiV1ValidatorIndexOrPubkeyPerformanceGetWithHttpInfo(indexOrPubkey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current performance of up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV1ValidatorIndexOrPubkeyPerformanceGetWithHttpInfo (string indexOrPubkey)
        {
            // verify the required parameter 'indexOrPubkey' is set
            if (indexOrPubkey == null)
                throw new ApiException(400, "Missing required parameter 'indexOrPubkey' when calling ValidatorApi->ApiV1ValidatorIndexOrPubkeyPerformanceGet");

            var localVarPath = "/api/v1/validator/{indexOrPubkey}/performance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (indexOrPubkey != null) localVarPathParams.Add("indexOrPubkey", this.Configuration.ApiClient.ParameterToString(indexOrPubkey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorIndexOrPubkeyPerformanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the current performance of up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV1ValidatorIndexOrPubkeyPerformanceGetAsync (string indexOrPubkey)
        {
             ApiResponse<string> localVarResponse = await ApiV1ValidatorIndexOrPubkeyPerformanceGetAsyncWithHttpInfo(indexOrPubkey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the current performance of up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorIndexOrPubkeyPerformanceGetAsyncWithHttpInfo (string indexOrPubkey)
        {
            // verify the required parameter 'indexOrPubkey' is set
            if (indexOrPubkey == null)
                throw new ApiException(400, "Missing required parameter 'indexOrPubkey' when calling ValidatorApi->ApiV1ValidatorIndexOrPubkeyPerformanceGet");

            var localVarPath = "/api/v1/validator/{indexOrPubkey}/performance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (indexOrPubkey != null) localVarPathParams.Add("indexOrPubkey", this.Configuration.ApiClient.ParameterToString(indexOrPubkey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorIndexOrPubkeyPerformanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all proposed blocks during the last 100 epochs for up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>string</returns>
        public string ApiV1ValidatorIndexOrPubkeyProposalsGet (string indexOrPubkey)
        {
             ApiResponse<string> localVarResponse = ApiV1ValidatorIndexOrPubkeyProposalsGetWithHttpInfo(indexOrPubkey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all proposed blocks during the last 100 epochs for up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV1ValidatorIndexOrPubkeyProposalsGetWithHttpInfo (string indexOrPubkey)
        {
            // verify the required parameter 'indexOrPubkey' is set
            if (indexOrPubkey == null)
                throw new ApiException(400, "Missing required parameter 'indexOrPubkey' when calling ValidatorApi->ApiV1ValidatorIndexOrPubkeyProposalsGet");

            var localVarPath = "/api/v1/validator/{indexOrPubkey}/proposals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (indexOrPubkey != null) localVarPathParams.Add("indexOrPubkey", this.Configuration.ApiClient.ParameterToString(indexOrPubkey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorIndexOrPubkeyProposalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all proposed blocks during the last 100 epochs for up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV1ValidatorIndexOrPubkeyProposalsGetAsync (string indexOrPubkey)
        {
             ApiResponse<string> localVarResponse = await ApiV1ValidatorIndexOrPubkeyProposalsGetAsyncWithHttpInfo(indexOrPubkey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all proposed blocks during the last 100 epochs for up to 100 validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="indexOrPubkey">Up to 100 validator indicesOrPubkeys, comma separated</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorIndexOrPubkeyProposalsGetAsyncWithHttpInfo (string indexOrPubkey)
        {
            // verify the required parameter 'indexOrPubkey' is set
            if (indexOrPubkey == null)
                throw new ApiException(400, "Missing required parameter 'indexOrPubkey' when calling ValidatorApi->ApiV1ValidatorIndexOrPubkeyProposalsGet");

            var localVarPath = "/api/v1/validator/{indexOrPubkey}/proposals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (indexOrPubkey != null) localVarPathParams.Add("indexOrPubkey", this.Configuration.ApiClient.ParameterToString(indexOrPubkey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorIndexOrPubkeyProposalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the current top 100 performing validators (using the income over the last 7 days) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string ApiV1ValidatorLeaderboardGet ()
        {
             ApiResponse<string> localVarResponse = ApiV1ValidatorLeaderboardGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current top 100 performing validators (using the income over the last 7 days) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ApiV1ValidatorLeaderboardGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/validator/leaderboard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorLeaderboardGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get the current top 100 performing validators (using the income over the last 7 days) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV1ValidatorLeaderboardGetAsync ()
        {
             ApiResponse<string> localVarResponse = await ApiV1ValidatorLeaderboardGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the current top 100 performing validators (using the income over the last 7 days) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV1ValidatorLeaderboardGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/validator/leaderboard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ValidatorLeaderboardGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
