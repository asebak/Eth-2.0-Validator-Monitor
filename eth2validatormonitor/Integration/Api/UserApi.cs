/* 
 * Beaconcha.in ETH2 API
 *
 * High performance API for querying information from the Ethereum 2.0 beacon chain The API is currently free to use. A fair use policy applies. Calls are rate limited to 10 requests / 1 minute / IP. All API results are cached for 1 minute. If you required a higher usage plan please checkout https://beaconcha.in/pricing.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Register or update your mobile notification token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your device&#x60;s firebase notification token</param>
        /// <returns>TypesApiResponse</returns>
        TypesApiResponse ApiV1UserDashboardSavePost (string token);

        /// <summary>
        /// Register or update your mobile notification token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your device&#x60;s firebase notification token</param>
        /// <returns>ApiResponse of TypesApiResponse</returns>
        ApiResponse<TypesApiResponse> ApiV1UserDashboardSavePostWithHttpInfo (string token);
        /// <summary>
        /// Get your device settings, currently only whether to enable mobile notifcations or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 ApiV1UserMobileSettingsGet ();

        /// <summary>
        /// Get your device settings, currently only whether to enable mobile notifcations or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> ApiV1UserMobileSettingsGetWithHttpInfo ();
        /// <summary>
        /// Changing your devices mobile settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyEnabled">Whether to enable mobile notifications for this device or not</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 ApiV1UserMobileSettingsPost (bool? notifyEnabled);

        /// <summary>
        /// Changing your devices mobile settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyEnabled">Whether to enable mobile notifications for this device or not</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> ApiV1UserMobileSettingsPostWithHttpInfo (bool? notifyEnabled);
        /// <summary>
        /// Exchange your oauth code for an access token or refresh your access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token</param>
        /// <param name="code">Only required when using authorization_code grant type. Code received via oauth redirect_uri (optional)</param>
        /// <param name="redirectUri">Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow. (optional)</param>
        /// <param name="refreshToken">Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow. (optional)</param>
        /// <returns>UtilsOAuthResponse</returns>
        UtilsOAuthResponse ApiV1UserTokenPost (string grantType, string code = null, string redirectUri = null, string refreshToken = null);

        /// <summary>
        /// Exchange your oauth code for an access token or refresh your access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token</param>
        /// <param name="code">Only required when using authorization_code grant type. Code received via oauth redirect_uri (optional)</param>
        /// <param name="redirectUri">Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow. (optional)</param>
        /// <param name="refreshToken">Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow. (optional)</param>
        /// <returns>ApiResponse of UtilsOAuthResponse</returns>
        ApiResponse<UtilsOAuthResponse> ApiV1UserTokenPostWithHttpInfo (string grantType, string code = null, string redirectUri = null, string refreshToken = null);
        /// <summary>
        /// subscribes a user to get notifications from a specific validator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <param name="balanceDecreases">Submit \\ (optional)</param>
        /// <param name="validatorSlashed">Submit \\ (optional)</param>
        /// <returns>TypesApiResponse</returns>
        TypesApiResponse ApiV1UserValidatorPubkeyAddPost (string pubKey, string balanceDecreases = null, string validatorSlashed = null);

        /// <summary>
        /// subscribes a user to get notifications from a specific validator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <param name="balanceDecreases">Submit \\ (optional)</param>
        /// <param name="validatorSlashed">Submit \\ (optional)</param>
        /// <returns>ApiResponse of TypesApiResponse</returns>
        ApiResponse<TypesApiResponse> ApiV1UserValidatorPubkeyAddPostWithHttpInfo (string pubKey, string balanceDecreases = null, string validatorSlashed = null);
        /// <summary>
        /// unsubscribes a user from a specific validator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <returns>TypesApiResponse</returns>
        TypesApiResponse ApiV1UserValidatorPubkeyRemovePost (string pubKey);

        /// <summary>
        /// unsubscribes a user from a specific validator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <returns>ApiResponse of TypesApiResponse</returns>
        ApiResponse<TypesApiResponse> ApiV1UserValidatorPubkeyRemovePostWithHttpInfo (string pubKey);
        /// <summary>
        /// Get all your tagged validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 ApiV1UserValidatorSavedGet ();

        /// <summary>
        /// Get all your tagged validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> ApiV1UserValidatorSavedGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Register or update your mobile notification token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your device&#x60;s firebase notification token</param>
        /// <returns>Task of TypesApiResponse</returns>
        System.Threading.Tasks.Task<TypesApiResponse> ApiV1UserDashboardSavePostAsync (string token);

        /// <summary>
        /// Register or update your mobile notification token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your device&#x60;s firebase notification token</param>
        /// <returns>Task of ApiResponse (TypesApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TypesApiResponse>> ApiV1UserDashboardSavePostAsyncWithHttpInfo (string token);
        /// <summary>
        /// Get your device settings, currently only whether to enable mobile notifcations or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> ApiV1UserMobileSettingsGetAsync ();

        /// <summary>
        /// Get your device settings, currently only whether to enable mobile notifcations or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiV1UserMobileSettingsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Changing your devices mobile settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyEnabled">Whether to enable mobile notifications for this device or not</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> ApiV1UserMobileSettingsPostAsync (bool? notifyEnabled);

        /// <summary>
        /// Changing your devices mobile settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyEnabled">Whether to enable mobile notifications for this device or not</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiV1UserMobileSettingsPostAsyncWithHttpInfo (bool? notifyEnabled);
        /// <summary>
        /// Exchange your oauth code for an access token or refresh your access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token</param>
        /// <param name="code">Only required when using authorization_code grant type. Code received via oauth redirect_uri (optional)</param>
        /// <param name="redirectUri">Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow. (optional)</param>
        /// <param name="refreshToken">Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow. (optional)</param>
        /// <returns>Task of UtilsOAuthResponse</returns>
        System.Threading.Tasks.Task<UtilsOAuthResponse> ApiV1UserTokenPostAsync (string grantType, string code = null, string redirectUri = null, string refreshToken = null);

        /// <summary>
        /// Exchange your oauth code for an access token or refresh your access token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token</param>
        /// <param name="code">Only required when using authorization_code grant type. Code received via oauth redirect_uri (optional)</param>
        /// <param name="redirectUri">Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow. (optional)</param>
        /// <param name="refreshToken">Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow. (optional)</param>
        /// <returns>Task of ApiResponse (UtilsOAuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UtilsOAuthResponse>> ApiV1UserTokenPostAsyncWithHttpInfo (string grantType, string code = null, string redirectUri = null, string refreshToken = null);
        /// <summary>
        /// subscribes a user to get notifications from a specific validator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <param name="balanceDecreases">Submit \\ (optional)</param>
        /// <param name="validatorSlashed">Submit \\ (optional)</param>
        /// <returns>Task of TypesApiResponse</returns>
        System.Threading.Tasks.Task<TypesApiResponse> ApiV1UserValidatorPubkeyAddPostAsync (string pubKey, string balanceDecreases = null, string validatorSlashed = null);

        /// <summary>
        /// subscribes a user to get notifications from a specific validator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <param name="balanceDecreases">Submit \\ (optional)</param>
        /// <param name="validatorSlashed">Submit \\ (optional)</param>
        /// <returns>Task of ApiResponse (TypesApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TypesApiResponse>> ApiV1UserValidatorPubkeyAddPostAsyncWithHttpInfo (string pubKey, string balanceDecreases = null, string validatorSlashed = null);
        /// <summary>
        /// unsubscribes a user from a specific validator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <returns>Task of TypesApiResponse</returns>
        System.Threading.Tasks.Task<TypesApiResponse> ApiV1UserValidatorPubkeyRemovePostAsync (string pubKey);

        /// <summary>
        /// unsubscribes a user from a specific validator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <returns>Task of ApiResponse (TypesApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TypesApiResponse>> ApiV1UserValidatorPubkeyRemovePostAsyncWithHttpInfo (string pubKey);
        /// <summary>
        /// Get all your tagged validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> ApiV1UserValidatorSavedGetAsync ();

        /// <summary>
        /// Get all your tagged validators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ApiV1UserValidatorSavedGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Register or update your mobile notification token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your device&#x60;s firebase notification token</param>
        /// <returns>TypesApiResponse</returns>
        public TypesApiResponse ApiV1UserDashboardSavePost (string token)
        {
             ApiResponse<TypesApiResponse> localVarResponse = ApiV1UserDashboardSavePostWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register or update your mobile notification token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your device&#x60;s firebase notification token</param>
        /// <returns>ApiResponse of TypesApiResponse</returns>
        public ApiResponse< TypesApiResponse > ApiV1UserDashboardSavePostWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->ApiV1UserDashboardSavePost");

            var localVarPath = "/api/v1/user/dashboard/save";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null && token.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(token); // http body (model) parameter
            }
            else
            {
                localVarPostBody = token; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserDashboardSavePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypesApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypesApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypesApiResponse)));
        }

        /// <summary>
        /// Register or update your mobile notification token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your device&#x60;s firebase notification token</param>
        /// <returns>Task of TypesApiResponse</returns>
        public async System.Threading.Tasks.Task<TypesApiResponse> ApiV1UserDashboardSavePostAsync (string token)
        {
             ApiResponse<TypesApiResponse> localVarResponse = await ApiV1UserDashboardSavePostAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register or update your mobile notification token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Your device&#x60;s firebase notification token</param>
        /// <returns>Task of ApiResponse (TypesApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TypesApiResponse>> ApiV1UserDashboardSavePostAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->ApiV1UserDashboardSavePost");

            var localVarPath = "/api/v1/user/dashboard/save";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null && token.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(token); // http body (model) parameter
            }
            else
            {
                localVarPostBody = token; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserDashboardSavePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypesApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypesApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypesApiResponse)));
        }

        /// <summary>
        /// Get your device settings, currently only whether to enable mobile notifcations or not 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 ApiV1UserMobileSettingsGet ()
        {
             ApiResponse<InlineResponse200> localVarResponse = ApiV1UserMobileSettingsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get your device settings, currently only whether to enable mobile notifcations or not 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > ApiV1UserMobileSettingsGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/user/mobile/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserMobileSettingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get your device settings, currently only whether to enable mobile notifcations or not 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> ApiV1UserMobileSettingsGetAsync ()
        {
             ApiResponse<InlineResponse200> localVarResponse = await ApiV1UserMobileSettingsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get your device settings, currently only whether to enable mobile notifcations or not 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiV1UserMobileSettingsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/user/mobile/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserMobileSettingsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Changing your devices mobile settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyEnabled">Whether to enable mobile notifications for this device or not</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 ApiV1UserMobileSettingsPost (bool? notifyEnabled)
        {
             ApiResponse<InlineResponse200> localVarResponse = ApiV1UserMobileSettingsPostWithHttpInfo(notifyEnabled);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Changing your devices mobile settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyEnabled">Whether to enable mobile notifications for this device or not</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > ApiV1UserMobileSettingsPostWithHttpInfo (bool? notifyEnabled)
        {
            // verify the required parameter 'notifyEnabled' is set
            if (notifyEnabled == null)
                throw new ApiException(400, "Missing required parameter 'notifyEnabled' when calling UserApi->ApiV1UserMobileSettingsPost");

            var localVarPath = "/api/v1/user/mobile/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notifyEnabled != null && notifyEnabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notifyEnabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notifyEnabled; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserMobileSettingsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Changing your devices mobile settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyEnabled">Whether to enable mobile notifications for this device or not</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> ApiV1UserMobileSettingsPostAsync (bool? notifyEnabled)
        {
             ApiResponse<InlineResponse200> localVarResponse = await ApiV1UserMobileSettingsPostAsyncWithHttpInfo(notifyEnabled);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Changing your devices mobile settings 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifyEnabled">Whether to enable mobile notifications for this device or not</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiV1UserMobileSettingsPostAsyncWithHttpInfo (bool? notifyEnabled)
        {
            // verify the required parameter 'notifyEnabled' is set
            if (notifyEnabled == null)
                throw new ApiException(400, "Missing required parameter 'notifyEnabled' when calling UserApi->ApiV1UserMobileSettingsPost");

            var localVarPath = "/api/v1/user/mobile/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notifyEnabled != null && notifyEnabled.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notifyEnabled); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notifyEnabled; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserMobileSettingsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Exchange your oauth code for an access token or refresh your access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token</param>
        /// <param name="code">Only required when using authorization_code grant type. Code received via oauth redirect_uri (optional)</param>
        /// <param name="redirectUri">Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow. (optional)</param>
        /// <param name="refreshToken">Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow. (optional)</param>
        /// <returns>UtilsOAuthResponse</returns>
        public UtilsOAuthResponse ApiV1UserTokenPost (string grantType, string code = null, string redirectUri = null, string refreshToken = null)
        {
             ApiResponse<UtilsOAuthResponse> localVarResponse = ApiV1UserTokenPostWithHttpInfo(grantType, code, redirectUri, refreshToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Exchange your oauth code for an access token or refresh your access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token</param>
        /// <param name="code">Only required when using authorization_code grant type. Code received via oauth redirect_uri (optional)</param>
        /// <param name="redirectUri">Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow. (optional)</param>
        /// <param name="refreshToken">Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow. (optional)</param>
        /// <returns>ApiResponse of UtilsOAuthResponse</returns>
        public ApiResponse< UtilsOAuthResponse > ApiV1UserTokenPostWithHttpInfo (string grantType, string code = null, string redirectUri = null, string refreshToken = null)
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new ApiException(400, "Missing required parameter 'grantType' when calling UserApi->ApiV1UserTokenPost");

            var localVarPath = "/api/v1/user/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (grantType != null) localVarFormParams.Add("grant_type", this.Configuration.ApiClient.ParameterToString(grantType)); // form parameter
            if (code != null) localVarFormParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // form parameter
            if (redirectUri != null) localVarFormParams.Add("redirect_uri", this.Configuration.ApiClient.ParameterToString(redirectUri)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refresh_token", this.Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter

            // authentication (OAuthAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UtilsOAuthResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UtilsOAuthResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UtilsOAuthResponse)));
        }

        /// <summary>
        /// Exchange your oauth code for an access token or refresh your access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token</param>
        /// <param name="code">Only required when using authorization_code grant type. Code received via oauth redirect_uri (optional)</param>
        /// <param name="redirectUri">Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow. (optional)</param>
        /// <param name="refreshToken">Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow. (optional)</param>
        /// <returns>Task of UtilsOAuthResponse</returns>
        public async System.Threading.Tasks.Task<UtilsOAuthResponse> ApiV1UserTokenPostAsync (string grantType, string code = null, string redirectUri = null, string refreshToken = null)
        {
             ApiResponse<UtilsOAuthResponse> localVarResponse = await ApiV1UserTokenPostAsyncWithHttpInfo(grantType, code, redirectUri, refreshToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Exchange your oauth code for an access token or refresh your access token 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">grant_type use authorization_code for oauth code or refresh_token if you wish to refresh an token</param>
        /// <param name="code">Only required when using authorization_code grant type. Code received via oauth redirect_uri (optional)</param>
        /// <param name="redirectUri">Only required when using authorization_code grant type. Must match the redirect_uri from your oauth flow. (optional)</param>
        /// <param name="refreshToken">Only required when using refresh_token grant type. The refresh_token you received during authorization_code flow. (optional)</param>
        /// <returns>Task of ApiResponse (UtilsOAuthResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UtilsOAuthResponse>> ApiV1UserTokenPostAsyncWithHttpInfo (string grantType, string code = null, string redirectUri = null, string refreshToken = null)
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new ApiException(400, "Missing required parameter 'grantType' when calling UserApi->ApiV1UserTokenPost");

            var localVarPath = "/api/v1/user/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (grantType != null) localVarFormParams.Add("grant_type", this.Configuration.ApiClient.ParameterToString(grantType)); // form parameter
            if (code != null) localVarFormParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // form parameter
            if (redirectUri != null) localVarFormParams.Add("redirect_uri", this.Configuration.ApiClient.ParameterToString(redirectUri)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refresh_token", this.Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter

            // authentication (OAuthAccessCode) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UtilsOAuthResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UtilsOAuthResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UtilsOAuthResponse)));
        }

        /// <summary>
        /// subscribes a user to get notifications from a specific validator 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <param name="balanceDecreases">Submit \\ (optional)</param>
        /// <param name="validatorSlashed">Submit \\ (optional)</param>
        /// <returns>TypesApiResponse</returns>
        public TypesApiResponse ApiV1UserValidatorPubkeyAddPost (string pubKey, string balanceDecreases = null, string validatorSlashed = null)
        {
             ApiResponse<TypesApiResponse> localVarResponse = ApiV1UserValidatorPubkeyAddPostWithHttpInfo(pubKey, balanceDecreases, validatorSlashed);
             return localVarResponse.Data;
        }

        /// <summary>
        /// subscribes a user to get notifications from a specific validator 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <param name="balanceDecreases">Submit \\ (optional)</param>
        /// <param name="validatorSlashed">Submit \\ (optional)</param>
        /// <returns>ApiResponse of TypesApiResponse</returns>
        public ApiResponse< TypesApiResponse > ApiV1UserValidatorPubkeyAddPostWithHttpInfo (string pubKey, string balanceDecreases = null, string validatorSlashed = null)
        {
            // verify the required parameter 'pubKey' is set
            if (pubKey == null)
                throw new ApiException(400, "Missing required parameter 'pubKey' when calling UserApi->ApiV1UserValidatorPubkeyAddPost");

            var localVarPath = "/api/v1/user/validator/{pubkey}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pubKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pubKey", pubKey)); // query parameter
            if (validatorSlashed != null && validatorSlashed.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(validatorSlashed); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validatorSlashed; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserValidatorPubkeyAddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypesApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypesApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypesApiResponse)));
        }

        /// <summary>
        /// subscribes a user to get notifications from a specific validator 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <param name="balanceDecreases">Submit \\ (optional)</param>
        /// <param name="validatorSlashed">Submit \\ (optional)</param>
        /// <returns>Task of TypesApiResponse</returns>
        public async System.Threading.Tasks.Task<TypesApiResponse> ApiV1UserValidatorPubkeyAddPostAsync (string pubKey, string balanceDecreases = null, string validatorSlashed = null)
        {
             ApiResponse<TypesApiResponse> localVarResponse = await ApiV1UserValidatorPubkeyAddPostAsyncWithHttpInfo(pubKey, balanceDecreases, validatorSlashed);
             return localVarResponse.Data;

        }

        /// <summary>
        /// subscribes a user to get notifications from a specific validator 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <param name="balanceDecreases">Submit \\ (optional)</param>
        /// <param name="validatorSlashed">Submit \\ (optional)</param>
        /// <returns>Task of ApiResponse (TypesApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TypesApiResponse>> ApiV1UserValidatorPubkeyAddPostAsyncWithHttpInfo (string pubKey, string balanceDecreases = null, string validatorSlashed = null)
        {
            // verify the required parameter 'pubKey' is set
            if (pubKey == null)
                throw new ApiException(400, "Missing required parameter 'pubKey' when calling UserApi->ApiV1UserValidatorPubkeyAddPost");

            var localVarPath = "/api/v1/user/validator/{pubkey}/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pubKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pubKey", pubKey)); // query parameter
            if (validatorSlashed != null && validatorSlashed.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(validatorSlashed); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validatorSlashed; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserValidatorPubkeyAddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypesApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypesApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypesApiResponse)));
        }

        /// <summary>
        /// unsubscribes a user from a specific validator 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <returns>TypesApiResponse</returns>
        public TypesApiResponse ApiV1UserValidatorPubkeyRemovePost (string pubKey)
        {
             ApiResponse<TypesApiResponse> localVarResponse = ApiV1UserValidatorPubkeyRemovePostWithHttpInfo(pubKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// unsubscribes a user from a specific validator 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <returns>ApiResponse of TypesApiResponse</returns>
        public ApiResponse< TypesApiResponse > ApiV1UserValidatorPubkeyRemovePostWithHttpInfo (string pubKey)
        {
            // verify the required parameter 'pubKey' is set
            if (pubKey == null)
                throw new ApiException(400, "Missing required parameter 'pubKey' when calling UserApi->ApiV1UserValidatorPubkeyRemovePost");

            var localVarPath = "/api/v1/user/validator/{pubkey}/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pubKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pubKey", pubKey)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserValidatorPubkeyRemovePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypesApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypesApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypesApiResponse)));
        }

        /// <summary>
        /// unsubscribes a user from a specific validator 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <returns>Task of TypesApiResponse</returns>
        public async System.Threading.Tasks.Task<TypesApiResponse> ApiV1UserValidatorPubkeyRemovePostAsync (string pubKey)
        {
             ApiResponse<TypesApiResponse> localVarResponse = await ApiV1UserValidatorPubkeyRemovePostAsyncWithHttpInfo(pubKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// unsubscribes a user from a specific validator 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pubKey">Public Key of validator you want to subscribe to</param>
        /// <returns>Task of ApiResponse (TypesApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TypesApiResponse>> ApiV1UserValidatorPubkeyRemovePostAsyncWithHttpInfo (string pubKey)
        {
            // verify the required parameter 'pubKey' is set
            if (pubKey == null)
                throw new ApiException(400, "Missing required parameter 'pubKey' when calling UserApi->ApiV1UserValidatorPubkeyRemovePost");

            var localVarPath = "/api/v1/user/validator/{pubkey}/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pubKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pubKey", pubKey)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserValidatorPubkeyRemovePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TypesApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TypesApiResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TypesApiResponse)));
        }

        /// <summary>
        /// Get all your tagged validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 ApiV1UserValidatorSavedGet ()
        {
             ApiResponse<InlineResponse2001> localVarResponse = ApiV1UserValidatorSavedGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all your tagged validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > ApiV1UserValidatorSavedGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/user/validator/saved";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserValidatorSavedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get all your tagged validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> ApiV1UserValidatorSavedGetAsync ()
        {
             ApiResponse<InlineResponse2001> localVarResponse = await ApiV1UserValidatorSavedGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all your tagged validators 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ApiV1UserValidatorSavedGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/user/validator/saved";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserValidatorSavedGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

    }
}
